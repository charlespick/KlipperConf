# This is the head configuration file for running Klipper on a FlashForge Creator 
# Pro 2 equipped with a BigTreeTech Octopus V1.0

# The Creator Pro 2 is an IDEX Printer from FlashForge. 
# The BigTreeTech Octopus is an 8-stepper driver control board powered by
# the 32-bit ARM Cortex-M4 series STM32F446ZET6. 
# Together with Klipper and a Raspberry Pi 4 and touchscreen, this printer is
# (hopefully) capable of impressive dimentional accuracy with convenient features
# such as filament managment, WiFi, additional safety features, and quieter operation. 

#############################################
# Extra Configs
#############################################

#[include adxl345.cfg]

#############################################
# Core Kinematics
#############################################

[printer]
kinematics: cartesian
max_velocity: 300 
max_accel: 10000 #verified 
max_z_velocity: 25 
max_z_accel: 500 

[stepper_x]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
microsteps: 16 
rotation_distance: 34
endstop_pin: ^PG6
position_endstop: -24 #verified
position_min: -29 #verified
position_max: 216 #verified
homing_speed: 150
homing_retract_dist: 10.0

[tmc2209 stepper_x] 
uart_pin: PC4
run_current: 0.7 #verified
stealthchop_threshold: 9999

[dual_carriage]
axis: x
step_pin: PG0
dir_pin: !PG1
enable_pin: !PF15
microsteps: 16 
rotation_distance: 34
endstop_pin: ^PG9
position_endstop: 252 #verified
position_min: 11 #verified -241 from endstop
position_max: 256 #verified +4 from endstop
homing_speed: 150
homing_retract_dist: 10.0

[tmc2209 dual_carriage]
uart_pin: PD11
run_current: 0.7 #verified
stealthchop_threshold: 9999

[stepper_y]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
microsteps: 16
rotation_distance: 34
endstop_pin: ^!PG10
position_endstop: -3 #verified
position_min: -3 #verified
position_max: 165 #verified
homing_speed: 150

[tmc2209 stepper_y]
uart_pin: PC7
run_current: 1.2 #verified
stealthchop_threshold: 9999

[stepper_z]
step_pin: PF9
dir_pin: !PF10
enable_pin: !PG2
microsteps: 16
rotation_distance: 8
endstop_pin: ^!PG13
position_max: 165 # lowered for tool change zhop
position_endstop: -9 #verified
position_min: -9 #verified
homing_speed: 20

[tmc2209 stepper_z]
uart_pin: PF2
run_current: 0.405 #verified
stealthchop_threshold: 9999

#############################################
# Heaaters
#############################################

[extruder]
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
microsteps: 16
rotation_distance: 32.82785546 #verified
nozzle_diameter: 0.400
max_extrude_only_velocity: 1000 #todo
filament_diameter: 1.750
pressure_advance_smooth_time: 0.010
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PF3
control: pid #verified matched
pid_kp: 30.353
pid_ki: 1.5685
pid_kd: 146.832
min_temp: 10
max_temp: 250 #verified

[tmc2209 extruder]
uart_pin: PE1
run_current: 1.1 #verified
stealthchop_threshold: 9999

[extruder1]
step_pin: PE6
dir_pin: !PA14
enable_pin: !PE0
microsteps: 16
rotation_distance: 32.82785546 #verified
nozzle_diameter: 0.400
max_extrude_only_velocity: 1000 #todo
filament_diameter: 1.750
pressure_advance_smooth_time: 0.010
heater_pin: PA3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PF4
control: pid #verified matched
pid_kp: 30.353
pid_ki: 1.5685
pid_kd: 146.832
min_temp: 10
max_temp: 250 #verified

[tmc2209 extruder1]
uart_pin: PD3
run_current: 1.1 #verified
stealthchop_threshold: 9999

[heater_bed]
heater_pin: PA1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PF5
control: pid
pid_Kp: 63.107 # verified PLA
pid_Ki: 1.798
pid_Kd: 553.767
#pid_Kp: 72.012 #verified ABS
#pid_Ki: 1.323 #verified
#pid_Kd: 980.262 #verified
min_temp: 10
max_temp: 130 #verified

#############################################
# Temperature Devices
#############################################

[heater_fan primary_extruder]
pin: PA8
heater: extruder

[heater_fan secondary_extruder]
pin: PD12
heater: extruder1

[controller_fan case_fan]
pin: PD14
fan_speed: 1.0
idle_speed: .6
heater: extruder, extruder1, heater_bed

[temperature_sensor octopus]
sensor_type: temperature_mcu

[temperature_sensor raspberry_pi]
sensor_type: temperature_host

[fan_generic part_fan_0]
pin: PE5
off_below: 0.1 #verified

[fan_generic part_fan_1]
pin: PD13
off_below: 0.1 #verified

[gcode_macro M106]
description: M106 with support for multiple fans
gcode:
    ; if the fanspeed isn't provided it defaults to max speed
    {% if params.S is defined %}
        {% set marlinSpeed = params.S|int %}
    {% else %}
        {% set marlinSpeed = 255 %}
    {% endif %}

    ; the fanspeed is put within range or converterd to klipper's speed value
    {% if marlinSpeed < 0 %}
        {% set klipperFanSpeed = 0 %}
    {% elif marlinSpeed > 255 %}
        {% set klipperFanSpeed = 1 %}
    {% else %}
        {% set klipperFanSpeed = marlinSpeed / 255 %}
    {% endif %}

    ; if P is not a number, it gets set to -1
    {% if params.P is defined %}
        {% set target = params.P|int %}
    {% else %}
        {% set P = -1 %}
    {% endif %}

    ; if the target is not a valid fan then all are set
    {% if target == 0 %}
            SET_FAN_SPEED FAN=part_fan_0 SPEED={klipperFanSpeed}
    {% elif target == 1 %}
            SET_FAN_SPEED FAN=part_fan_1 SPEED={klipperFanSpeed}
    {% else %}
            SET_FAN_SPEED FAN=part_fan_0 SPEED={klipperFanSpeed}
            SET_FAN_SPEED FAN=part_fan_1 SPEED={klipperFanSpeed}
    {% endif %}

[gcode_macro M107]
description: Turn off all fans
gcode:
    M106 S0

#############################################
# Software Settings
#############################################

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_34001C00115053424E363620-if00

[save_variables]
filename: ~/klipper_config/variables.klip

[idle_timeout]
timeout: 3600

[force_move]
enable_force_move: true # for homing z safely

[sdcard_loop]

[virtual_sdcard]
path: /home/pi/gcode_files

[pause_resume]

[display_status]

[input_shaper]
shaper_freq_x: 39.0
shaper_freq_y: 40.2
shaper_type_x: 2hump_ei
shaper_type_y: ei

[gcode_arcs]

[endstop_phase]

[homing_override] #todo
gcode: 
    SAVE_GCODE_STATE NAME=home
    SET_STEPPER_ENABLE STEPPER=dual_carriage ENABLE=0
    FORCE_MOVE STEPPER=stepper_z DISTANCE=3 VELOCITY=10
    G28 XYZ
    G90
    G1 Z10 F3000
    {% if printer.toolhead.extruder == "extruder" %}
        T0
    {% else %}
        T1
    {% endif %}
    RESTORE_GCODE_STATE NAME=home

[bed_screws]
screw1: 65, 143
screw1_name: back_left
screw2: 163, 143
screw2_name: back_right
screw3: 114, 5
screw3_name: front_center

#############################################
# Accesories
#############################################

[neopixel chamber_light]
pin: PB0
chain_count: 16
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0

[filament_switch_sensor material_1]
switch_pin: PG14

[filament_switch_sensor material_2]
switch_pin: PG15

#############################################
# Macros
#############################################

[gcode_macro load_filament]
gcode:
    G28
    present_bed
    G90
    SET_DUAL_CARRIAGE CARRIAGE=0
    G1 X50 Y30 F3000
    SET_DUAL_CARRIAGE CARRIAGE=1 
    G1 X180

[gcode_macro start_print]
gcode: 
    conf_runout
    SAVE_GCODE_STATE NAME=start_print_state
    {% set initialExtruder = printer.toolhead.extruder %}
    G28 ; home all axes
    G90
    {% if printer.extruder.target >= 170 %}
        T0
        G1 X15 Y145 Z0.2 F15000 ; move to prime
        M83
        G92 E0 ; reset extrusion distance
        G1 X110 E15 F1000 ; prime nozzle
        G1 X200 F300000 ; quick wipe
        G92 E0 ; reset extrusion distance
        PARK_extruder
    {% endif %}
    {% if printer.extruder1.target >= 170 %}
        T1
        G1 X15 Y146 Z0.2 F15000 ; move to prime
        M83
        G92 E0 ; reset extrusion distance
        G1 X110 E15 F1000 ; prime nozzle
        G1 X200 F300000 ; quick wipe
        G92 E0 ; reset extrusion distance
        PARK_extruder1
    {% endif %}
    {% if initialExtruder == "extruder1" %}
        T1
    {% else %}
        T0
    {% endif %}
    RESTORE_GCODE_STATE NAME=start_print_state
description: Home and Prime

[gcode_macro conf_runout]
gcode:
    {% if printer["filament_switch_sensor material_1"].filament_detected %}
        SET_FILAMENT_SENSOR SENSOR=material_1 ENABLE=1
    {% else %}
        SET_FILAMENT_SENSOR SENSOR=material_1 ENABLE=0
    {% endif %}
    {% if printer["filament_switch_sensor material_2"].filament_detected %}
        SET_FILAMENT_SENSOR SENSOR=material_2 ENABLE=1
    {% else %}
        SET_FILAMENT_SENSOR SENSOR=material_2 ENABLE=0
    {% endif %}

[gcode_macro end_print]
gcode: 
    M106 S0 ; turn off cooling fan
    M104 S0 ; turn off extruder
    M140 S0 ; turn off bed
    PRESENT_BED
    M84 ; disable motors
description: Finish print

[gcode_macro present_bed]
gcode: 
    PARK_extruder
    PARK_extruder1
    G1 Z170 F3000
description: Moves the head and bed WITHOUT THE Z AXIS

[gcode_macro M900]
gcode: 
    SET_PRESSURE_ADVANCE ADVANCE={params.K|float}

[gcode_macro set_separation]
gcode: 
    {% set svv = printer.save_variables.variables %}

    {% set oldX = svv.xoffset|float %}
    {% set oldY = svv.yoffset|float %}
    {% set oldZ = svv.zoffset|float %}

    {% if params.X is defined %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}

    {% if params.Y is defined %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}

    {% if params.Z is defined %}
        SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
        {% set newX = params.X_ADJUST|float + oldX %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX|float }
    {% endif %}

    {% if params.Y_ADJUST is defined %}
        {% set newY = params.Y_ADJUST|float + oldY %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY|float }
    {% endif %}

    {% if params.Z_ADJUST is defined %}
        {% set newZ = params.Z_ADJUST|float + oldZ %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newZ|float }
    {% endif %}

[gcode_macro calibrate_separation]
gcode: 
    G90 ; absolute
    M83 ; relative
    T0
    G1 X20       Y75      Z.2           F4800
    G1 X115                     E10
    G1           Y130           E10
    T1
    G1 X210      Y75
    G1 X115                     E10
    G1           Y20            E10
    present_bed

[gcode_macro PARK_extruder]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0
    SAVE_GCODE_STATE NAME=park0
    SET_GCODE_OFFSET Y=0 X=0
    G90
    G1 X{ printer.toolhead.axis_minimum.x } F24000
    RESTORE_GCODE_STATE NAME=park0

[gcode_macro T0]
variable_offset_applied: 0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if "x" in printer.toolhead.homed_axes %}
        FORCE_MOVE STEPPER=stepper_z DISTANCE=1 VELOCITY=25
        PARK_extruder1
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    {% if printer["gcode_macro T0"].offset_applied == 1 %}
        SET_GCODE_OFFSET  X_ADJUST={ -(svv.xoffset) } Y_ADJUST={ -(svv.yoffset) }
        SET_GCODE_OFFSET Z_ADJUST={ -(svv.zoffset) } MOVE=1 MOVE_SPEED=25
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=0
    {% endif %}
    SET_INPUT_SHAPER SHAPER_FREQ_X=39.0 SHAPER_FREQ_Y=40.2 SHAPER_TYPE_X=2hump_ei SHAPER_TYPE_Y=ei
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-1 VELOCITY=25

[gcode_macro PARK_extruder1]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=1
    SAVE_GCODE_STATE NAME=park1
    SET_GCODE_OFFSET Y=0 X=0
    G90
    ;G1 X{ printer.toolhead.axis_maximum.x } F24000
    G1 X254 F24000
    RESTORE_GCODE_STATE NAME=park1

[gcode_macro T1]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if "x" in printer.toolhead.homed_axes %}
        FORCE_MOVE STEPPER=stepper_z DISTANCE=1 VELOCITY=25
        PARK_extruder
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    {% if printer["gcode_macro T0"].offset_applied == 0 %}
        SET_GCODE_OFFSET  X_ADJUST={ svv.xoffset } Y_ADJUST={ svv.yoffset }
        SET_GCODE_OFFSET Z_ADJUST={ svv.zoffset } MOVE=1 MOVE_SPEED=25
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=1
    {% endif %}
    SET_INPUT_SHAPER SHAPER_FREQ_X=55.6 SHAPER_FREQ_Y=31.0 SHAPER_TYPE_X=mzv SHAPER_TYPE_Y=mzv
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-1 VELOCITY=25

    [gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}
